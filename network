#!/usr/bin/perl

# Copyright 2016 ARClab, Lionel Riem - https://arclab.ch/
# Copyright 2012 BSDGuides.org (https://github.com/overrider/wireless)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;


#
# Configuration
#

#my $config_file = "/etc/networks.conf";
my $config_file = "./networks.conf";


#
# Declarations
#

my $version = "VERSION";

sub usage;
sub list;
sub scan;
sub airplane;
sub net_connect;
sub vpn;

sub check_root;
sub dhcp_client;
sub dhcp_setup;
sub dns_setup;
sub ipv4_setup;
sub route4_setup;
sub ipv6_setup;
sub route6_setup;
sub wlan_config;
sub if_lladdr;
sub if_down;
sub vpn_disconnect;
sub vpn_openvpn;


# 
# Check the environment and read the configuration file
#

my %configuration;
my $current;
my $network;
my $vpn;

die("Error: you are not running OpenBSD.\n") unless $^O eq "openbsd";
open FILE,"<",$config_file
    or die("Error: could not open configuration file ($config_file).\n");

while(<FILE>) {
    chomp;
    next if($_ =~ m/^\s*$/);
    next if($_ =~ m/^#/);

    if($_ eq "[config]") {
        $current = "config";
        next;
    }
    if($_ eq "[network]") {
        $current = "network";
        $network += 1;
        next;
    }
    if($_ eq "[vpn]") {
        $current = "vpn";
        $vpn += 1;
        next;
    }
    die("Config error: key=value pair expected on line $..\n")
        unless $_ =~ m/^\w+=.+$/;

    my ($key,$value) = split("=",$_);
    if($current eq "config") {
        $configuration{$current}{$key} = $value;
    } elsif($current eq "network") {
        $configuration{$current}{$network}{$key} = $value;
    } elsif($current eq "vpn") {
        $configuration{$current}{$vpn}{$key} = $value;
    }
}

close(FILE);


#
# Check the configuration and parse commands
#

my %config    = %{$configuration{"config"}};
my %networks;
if($configuration{"network"}) { %networks  = %{$configuration{"network"}}; }
my %vpns;
if($configuration{"vpn"}) { %vpns = %{$configuration{"vpn"}}; }
my $wlan_int  = $config{"wlan_int"}
    or die("Config error: could not find the wireless interface.\n");
my $wired_int = $config{"wired_int"};

if(@ARGV) {
    my $command = shift(@ARGV);
    my $argument = shift(@ARGV);

    if(uc($command) eq uc("list") or uc($command) eq uc("l"))
        { list(); }
    elsif(uc($command) eq uc("scan") or uc($command) eq uc("s"))
        { scan(); }
    elsif(uc($command) eq uc("airplane") or uc($command) eq uc("a"))
        { airplane(); }
    elsif(uc($command) eq uc("connect") or uc($command) eq uc("c"))
        { net_connect($argument); }
    elsif(uc($command) eq uc("vpn") or uc($command) eq uc("v"))
        { vpn($argument); }
    else { usage(); }
} else { usage(); }


#
# Display usage/help
#

sub usage {
    print "Network $version -- Command line network manager\n";
    print "\n";
    print "Usage: network [command] [argument]\n";
    print "\n";
    print "Commands:\n";
    print "   list                List configured networks and VPNs.\n";
    print "   scan                Scan available wireless networks (requires ";
    print                         "root privileges).\n";
    print "                       Warning: scanning disconnects from current ";
    print                         "wireless network!\n";
    print "   airplane            Disable all interfaces and VPNs (requires ";
    print                         "root privileges).\n";
    print "   connect [network]   Connect to configured network (requires ";
    print                         "root privileges).\n";
    print "   vpn [argument]      Connect to a VPN network or, if argument is ";
    print                         "'disconnect',\n";
    print "                       disconnects from a VPN (requires root ";
    print                         "privileges).\n";
    print "   help                Print help (this message).\n";
}


#
# List configured networks
#

sub list {

    # Networks
    print "Configured networks:\n";
    printf("%-10s %-18s %-7s %-6s %-6s %-6s %-10s %-17s\n", "Network", "SSID",
        "Type", "IPv4", "IPv6", "DNS", "Hostname", "Link addr");
    print "-" x 80 . "\n";

    foreach my $index (sort (keys %networks)) {
        my %net = %{$networks{$index}};
        my $type;
        my $dns;
        my $ipv4;
        my $ipv6;
        my $hostname;
        my $lladdr;

        if(uc($net{"type"}) eq uc("wired")) {
            $type = "Wired";
        } elsif(uc($net{"type"}) eq uc("open")) {
            $type = "Open";
        } elsif(uc($net{"type"}) eq uc("wep")) {
            $type = "WEP";
        } elsif(uc($net{"type"}) eq uc("WPA")) {
            $type = "WPA";
        } else {
            $type = $net{"type"};
        }

        if(uc($net{"ipv4"}) eq uc("dhcp") && !defined($net{"dns"})) {
            $dns = "Auto";
        } elsif(!defined($net{"dns"})) {
            $dns = "-";
        } else {
            $dns = "Cust.";
        }

        if(uc($net{"ipv4"}) eq uc("dhcp")) {
            $ipv4 = "DHCP";
        } elsif(uc($net{"ipv4"}) eq uc("none")) {
            $ipv4 = "None";
        } else {
            $ipv4 = "Cust.";
        }

        if(!defined($net{"ipv6"})) {
            $ipv6 = "-";
        } elsif(uc($net{"ipv6"}) eq uc("auto")) {
            $ipv6 = "Auto";
        } else {
            $ipv6 = "Cust.";
        }

        if(!defined($net{"hostname"})) {
            $hostname = "Default";
        } elsif(uc($net{"hostname"}) eq uc("none")) {
            $hostname = "None";
        } else {
            $hostname = $net{"hostname"};
        }

        if(!defined($net{"lladdr"})) {
            $lladdr = "Default";
        } elsif(uc($net{"lladdr"}) eq uc("random")) {
            $lladdr = "Random";
        } else {
            $lladdr = $net{"lladdr"};
        }

        printf("%-10s %-18s %-7s %-6s %-6s %-6s %-10s %-17s\n", $net{"name"},
            ($net{"ssid"} || "-"), $type, $ipv4, $ipv6, $dns, $hostname,
            $lladdr);
    }
    print "-" x 80 . "\n\n";

    # VPNs
    print "Configured VPNs:\n";
    printf("%-20s %-10s %-50s\n", "VPN name", "Type", "Configuration file");
    print "-" x 80 . "\n";
    foreach my $index (sort (keys %vpns)) {
        my %vpncon = %{$vpns{$index}};
        my $type = "?";
        if(uc($vpncon{"type"}) eq uc("openvpn")) {
            $type = "OpenVPN";
        }
        printf("%-20s %-10s %-50s\n", $vpncon{"name"}, $type,
            $vpncon{"config"});
    }
    print "-" x 80 . "\n";
}


#
# Scan available wireless networks
#

sub scan {
    my $int = $config{"wlan_int"};
    check_root();

    print "Scanning available wireless networks...\n";
    system("ifconfig $int -nwid -chan down")==0 or die;
    my @result = `ifconfig $int scan`;
    chomp @result;
    my @networks = grep(/chan/, @result);
    printf("%-28s %-5s %-45s\n", "Network SSID", "Sign", "Parameters");
    print "-" x 80 . "\n";
    foreach my $line (@networks) {
	$line =~ 
	    /^[[:space:]]*nwid (.*) chan .* bssid .* (.*)dBm HT-MCS\d* (.*)$/;
	printf("%-28s %-5s %-45s\n", $1, $2, $3);
    }
    print "-" x 80 . "\n";
}


#
# Puts the laptop in "airplane" mode by disabling all interfaces
#

sub airplane {
    my $wired_int = $config{"wired_int"};
    my $wlan_int = $config{"wlan_int"};
    check_root();
    if_down($wired_int) if $wired_int;
    if_down($wlan_int);
    print "System now in airplane mode.\n";
}


#
# Connects to a network
#

sub net_connect {
    my $net = shift;
    if (!defined $net){
        print("Error: no network connection declared.\n");
	return;
    }
    check_root();

    my $wlan_int = $config{"wlan_int"};
    my $wired_int = $config{"wired_int"};

    my %connect;
    foreach my $index(keys %networks) {
        my %network = %{$networks{$index}};
        if(uc($network{"name"}) eq uc($net)) {
            %connect = %network;
        } else {
            next;
        }
    }

    if(scalar(keys %connect) > 0) {
        my $int;

        # Check if we are using a custom DNS
        my $dns = 0;
        $dns = 1 if $connect{"dns"};

        # Check if ipv4, hostname and lladdr have been provided
        # If not, assume dhcp/default.
        $connect{"ipv4"}     = "dhcp"    unless $connect{"ipv4"};
        $connect{"hostname"} = "default" unless $connect{"hostname"};
        $connect{"lladdr"}   = "default" unless $connect{"lladdr"};

        # Setup the interfaces
        if(uc($connect{"type"}) eq uc("wired")) {
            die("Error: could not find the wired interface.\n")
                unless $wired_int;
            $int = $wired_int;
            if_down($wlan_int);
            if_lladdr($wired_int, $connect{"lladdr"});
        } else {
            $int = $wlan_int;
            if_down($wired_int) if $wired_int;
            if_lladdr($wlan_int, $connect{"lladdr"});
            wlan_config($wlan_int, $connect{"ssid"}, $connect{"key"},
                $connect{"type"});
        }

        # Setup the IPv4 environment
        if(uc($connect{"ipv4"}) eq uc("dhcp")) {
            dhcp_setup($connect{"hostname"}, $dns);
            if($dns == 1) {
                dns_setup($connect{"dns"}, $connect{"dns_domain"});
            }
            dhcp_client($int);
        } elsif(uc($connect{"ipv4"}) ne uc("none")) {
            $connect{"ipv4"} =~ /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$/
                or die("Error: ".$connect{"ipv4"}." is not a valid IPv4 ".
                "CIDR.\n");
            ipv4_setup($int, $connect{"ipv4"});
            if(defined($connect{"ipv4_gw"})) {
                $connect{"ipv4_gw"} =~ /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
                    or die("Error: ".$connect{"ipv4_gw"}." is not a valid IPv4".
                    " address.\n");
                route4_setup($connect{"ipv4_gw"});
            } else {
                print "Warning: you are using a static IPv4 address but ";
                print "haven't set a gateway.\n";
            }
            if($dns == 1) {
                dns_setup($connect{"dns"}, $connect{"dns_domain"});
            } else {
                print "Warning: you are using a static IP address but ";
                print "haven't set DNS settings.\n";
            }
        }

        # Setup the IPv6 environment
        if(defined($connect{"ipv6"})) {
            if(uc($connect{"ipv6"}) ne uc("auto")) {
                $connect{"ipv6"} =~ /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/(d|dd|1[0-1]d|12[0-8]))$/
                    or die("Error: ".$connect{"ipv6"}." is not a valid IPv6 ".
                    "CIDR.\n");
            }
            ipv6_setup($int, $connect{"ipv6"});
            if(uc($connect{"ipv6"}) ne uc("auto") &&
                !defined($connect{"ipv6_gw"})) {
                print "Warning: you are using a static IPv6 address but ";
                print "haven't set a gateway.\n";
            } elsif(uc($connect{"ipv6"}) ne uc("auto") &&
                defined($connect{"ipv6_gw"})) {
                $connect{"ipv6_gw"} =~ /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*/
                    or die("Error: ".$connect{"ipv6_gw"}." is not a valid ".
                    "IPv6 address.\n");
                route6_setup($connect{"ipv6_gw"});
            } else {
                print "Using IPv6 autoconfiguration, ignoring IPv6 gateway.\n";
            }
            if(uc($connect{"ipv6"}) ne uc("auto") &&
                !defined($connect{"dns"})) {
                print "Warning: you are using a static IPv6 address without ";
                print "any IPv4 address but haven't set DNS settings.\n";
            } elsif(uc($connect{"ipv4"}) eq uc("none") &&
                defined($connect{"dns"})) {
                dns_setup($connect{"dns"}, $connect{"dns_domain"});
            }
        }

    } else {
        print "Error: network \"$net\" not found in the configuration file.\n";
    }
}


#
# Connect to or disconnect from a VPN
#

sub vpn {
    my $vpncon = shift;
    if (!defined $vpncon){
        print("Error: no vpn connection declared.\n");
	return;
    }
    check_root();

    my %connect;

    # Check if we are disconnecting
    if(uc($vpncon) eq uc("disconnect")) {
        print "Disconnecting VPN.\n";
        vpn_disconnect();
    } else {

        foreach my $index(keys %vpns) {
            my %vpn = %{$vpns{$index}};
            if(uc($vpn{"name"}) eq uc ($vpncon)) {
                %connect = %vpn;
            } else {
                next;
            }
        }
    
        if(scalar(keys %connect) > 0) {
            print "Connecting to \"".$connect{"name"}."\".\n";
            
            # Switch case VPN type
            if(uc($connect{"type"}) eq uc("openvpn")) {
                vpn_openvpn($connect{"config"});
            } else {
                print "Error: unknown VPN type \"".$connect{"type"}."\".\n";
            }
        } else {
            print "Error: VPN \"$vpncon\" not found in the configuration ";
            print "file.\n";
        }
    }
}


#
# Check if running as root or die
#

sub check_root {
    die("Error: this operation requires root privilege.\n") unless $> eq 0;
}


#
# Start DHCP client
#

sub dhcp_client {
    my $interface = shift;
    print "Getting an IP address on $interface via DHCP.\n";
    system("dhclient $interface")==0 or die;
}


#
# Setup /etc/dhclient.conf
#

sub dhcp_setup {
    my $hostname = shift;
    my $dns = shift;
    system("echo '# Generated by network/$version\n' > /etc/dhclient.conf")==0
        or die;
    if(uc($hostname) eq uc("default")) {
        $hostname = $config{"hostname"};
    }

    # Setup the hostname
    if(uc($hostname) eq uc("none")) {
        print "Removing DHCP hostname (won't be sent).\n";
        system("echo '#send host-name \"none\";' >> /etc/dhclient.conf")==0
	       or die;
    } else {
        print "Changing DHCP hostname to \"$hostname\".\n";
        system("echo 'send host-name \"$hostname\";' >> /etc/dhclient.conf")==0
	       or die;
    }

    # Ignore the DNS, if needed
    if($dns == 1) {
        print "Ignoring DNS settings offered by DHCP.\n";
        system("echo 'ignore domain-name-servers, domain-name;' >> ".
            "/etc/dhclient.conf")==0 or die;
    }
}


#
# Setup /etc/resolv.conf
#

sub dns_setup {
    my $srvlist = shift;
    my $domain  = shift;
    my @servers = split(/ /, $srvlist);
    print "Configuring DNS settings.\n";
    system("echo '# Generated by network/$version\n' > /etc/resolv.conf")==0
	   or die;
   
    # Go through provided servers
    for my $server (@servers) {
        system("echo 'nameserver $server' >> /etc/resolv.conf")==0 or die;
    }

    # If a domain is provided, add it
    if(defined($domain)) {
        system("echo 'domain $domain' >> /etc/resolv.conf")==0 or die;
        system("echo 'search $domain' >> /etc/resolv.conf")==0 or die;
    }
    
    system("echo 'lookup file bind' >> /etc/resolv.conf")==0 or die;
}


#
# Setup IPv4
#

sub ipv4_setup {
    my $int  = shift;
    my $cidr = shift;
    print "Configuring IPv4 settings.\n";
    system("ifconfig $int inet $cidr")==0 or die;
}

#
# Setup IPv4 routes
#

sub route4_setup {
    my $gw = shift;
    print "Configuring IPv4 route settings.\n";

    # Flush existing routes
    my $flush = `route -n flush -inet`;

    # Add new gateway
    system("route add -inet default $gw")==0 or die;
}


#
# Setup IPv6
#

sub ipv6_setup {
    my $int = shift;
    my $cidr = shift;
    print "Configuring IPv6 settings.\n";

    if(uc($cidr) eq uc("auto")) {
        $cidr = "autoconf";
    }

    system("ifconfig $int inet6 $cidr")==0 or die;
}


#
# Setup IPv6 routes
#

sub route6_setup {
    my $gw = shift;
    print "Configuring IPv6 route settings.\n";

    # Flush existing routes
    my $flush = `route -n flush -inet6`;

    # Add new gateway
    system("route add -inet6 default $gw")==0 or die;
}


#
# Configure the WLAN interface
#

sub wlan_config {
    my ($int, $ssid, $key, $type) = @_;
    print "Configuring SSID \"$ssid\" on $int.\n";
    system("pkill wpa_supplicant");
    system("ifconfig $int -nwid -nwkey -wpa -wpakey")==0 or die;
    if(uc($type) eq uc("open")) {
        system("ifconfig $int nwid \"$ssid\"")==0 or die;
    } elsif(uc($type) eq uc("wep")) {
        system("ifconfig $int nwid \"$ssid\" nwkey \"$key\"")==0 or die;
    } elsif(uc($type) eq uc("wpa")) {
        system("ifconfig $int nwid \"$ssid\" wpa wpaakms ".
	       "psk wpakey \"$key\"")==0 or die;
    } elsif(uc($type) eq uc("802.1x")) {
        system("ifconfig $int nwid \"$ssid\" wpa wpaakms 802.1x")==0 or die;
        print "Starting WPA supplicant.\n";
        system("wpa_supplicant -D openbsd -i $int -B ".
            "-c /etc/wpa_supplicant.conf")==0 or die;
    } else {
        die("Error: unknown network type \"$type\".\n");
    }
}


#
# Set interface link layer address
#

sub if_lladdr {
    my $int    = shift;
    my $lladdr = shift;
    if(uc($lladdr) eq uc("default")) {
        if($int eq $wired_int) {
            $lladdr = $config{"wired_lladdr"};
        } else {
            $lladdr = $config{"wlan_lladdr"};
        }
    }
    die("Error: unable to find default link layer address for $int.\n")
        unless $lladdr;
    print "Setting link layer address for $int to $lladdr.\n";
    system("ifconfig $int lladdr $lladdr")==0 or die;
}


#
# Bring interface down
# we delete all configured addresses
#

sub if_down {
    my $int = shift;
    my $wlan_int = $config{"wlan_int"};
    print "Bringing $int down.\n";
    if($int eq $wlan_int) {
        system("pkill wpa_supplicant");
        system("ifconfig $int -inet -inet6 -nwid -nwkey -chan ".
		"-wpa -wpakey down")==0 or die;
    } else {
        system("ifconfig $int -inet -inet6 down")==0 or die;
    }
}


#
# Disconnect VPN
#

sub vpn_disconnect {
    system("pkill openvpn");
}


#
# OpenVPN handler
#

sub vpn_openvpn {
    my $config = shift;
    system("openvpn --config $config --daemon")==0 or die;
}
